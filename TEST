LoadPackage("orb");
gens := AtlasGenerators("M11",17).generators;
gens := List(gens,CMat);
v := ShallowCopy(gens[1][1]);
RandomizeVector(v);
o := InitOrbit(gens,v,OnRight,12000);
Enumerate(o,infinity);

findinvo := function(G,x)
  # x an involution in G
  local i,l,y;
  l := []; 
  for i in [1..50] do   # find 50 generators of the centraliser
      y := RECOG.FindCentralisingElementOfInvolution(G,x);
      AddSet(l,y); 
  od;     
  return GroupWithGenerators(l);
end;

# Using permutation representation:
LoadPackage("orb");
gens := AtlasGenerators("Co1",1).generators;
cyc := AtlasStraightLineProgram("Co1","cyclic");
slp12g := RestrictOutputsOfSLP(cyc.program,3);
slp33a := RestrictOutputsOfSLP(cyc.program,32);
gensm := GeneratorsWithMemory(gens);
el2am := ResultOfStraightLineProgram(slp12g,gensm)^6;
el2a := StripMemory(el2am);
el3am := ResultOfStraightLineProgram(slp33a,gensm)^11;
el3a := StripMemory(el3am);
g := GroupWithGenerators(gensm);
icm := findinvo(g,el2am);
ic := GroupWithGenerators(StripMemory(GeneratorsOfGroup(icm)));
iso := SmallerDegreePermutationRepresentation(ic);
ics := Image(iso);
SetSize(ics,89181388800);  # we know this is 2^(1+8)+.O8+(2), the 4th max.
StabChain(ics,rec(random := 900));

f := function(x)
  local icic,y;
  if x = el2a or x * el2a <> el2a * x then return false; fi;
  y := ImageElm(iso,x);
  icic := findinvo(ics,y);
  StabChain(icic,rec(random := 900));
  Print("Size: ",Size(icic),"\n");
  if Size(icic) <> 1474560 then
      icic := findinvo(ics,y);
      StabChain(icic);
      Print("Size2: ",Size(icic),"\n");
  fi;
  return Size(icic) > 8000000;
end;

rs := RandomSearcher( gensm, x->f(el2a^x) );
Search(rs);


# Using the matrix group and recog:

LoadPackage("orb");
SetInfoLevel(InfoRecognition,0);
SetInfoLevel(InfoMethSel,0);
gens := AtlasGenerators("Co1",2).generators;
#gens := List(gens,CMat);
cyc := AtlasStraightLineProgram("Co1","cyclic");
slp12g := RestrictOutputsOfSLP(cyc.program,3);
slp33a := RestrictOutputsOfSLP(cyc.program,32);
gensm := GeneratorsWithMemory(gens);
el2am := ResultOfStraightLineProgram(slp12g,gensm)^6;
el2a := StripMemory(el2am);
el3am := ResultOfStraightLineProgram(slp33a,gensm)^11;
el3a := StripMemory(el3am);
g := GroupWithGenerators(gensm);
icm := findinvo(g,el2am);
ic := GroupWithGenerators(StripMemory(GeneratorsOfGroup(icm)));

f := function(x)
  local icic,ri;
  if x = el2a or x * el2a <> el2a * x then return false; fi;
  icic := findinvo(ic,x);
  ri := RecogniseGroup(icic);
  Print("Size: ",Size(ri),"\n");
  if Size(ri) < 8000000 then return false; fi;
  ri := RecogniseGroup(icic);
  Print("Size2: ",Size(ri),"\n");
  return Size(icic) > 8000000;
end;

rs := RandomSearcher( gensm, x->f(el2a^x) );
Search(rs);


