<!-- 

         bysuborbit.xml            orb package documentation             
                                                               Max Neunhoeffer
                                                                  Felix Noeske

         Copyright (C) 2005, Lehrstuhl D für Mathematik, RWTH-Aachen

This chapter explains functionality for enumeration by suborbits.

-->

<Chapter Label="bysuborbit">
<Heading>Orbit enumeration by suborbits</Heading>

The code described in this chapter is quite complicated and one has
to understand quite a lot of theory to use it. The reason for this is
that a lot of preparatory data has to be found and supplied by the user
in order for this code to run at all. Also the situations in which it
can be used are quite special. However, in such a situation, the user
is rewarded with impressive performance.

<P/> The main reference for the theory is <Cite Key="MNW"/>. We briefly
recall the basic setup: Let <M>G</M> be a group acting from the right
on some set <M>X</M>. Let <M>k</M> be a natural number, set 
<M>X_{{k+1}} := X</M>, and let
<Display> U_1 &lt; U_2 &lt; \cdots &lt; U_k &lt; U_{{k+1}} = G </Display>
be a chain of <Q>helper</Q> subgroups. Further, for <M>1 \le i \le k</M>
let <M>X_i</M> be a <M>U_i</M> set and let <M>\pi_i : X_{{i+1}} \to X_i</M>
be a homomorphism of <M>U_i</M>-sets.

<P/> This chapter starts with a section about the main orbit enumeration
function and the corresponding preparation functions. It then proceeds
with a section on the used data structures, which will necessarily be
rather technical. Finally, the chapter concludes with a section
on higher level data structures like lists of orbit-by-suborbit
objects and their administration. Note that there are quite a few
examples in Chapter <Ref Chap="examples"/>.

<Section>
<Heading><C>OrbitBySuborbits</C> and its preparation functions</Heading>

<ManSection>
<Func Name="OrbitBySuborbit" Arg="setup, p, j, l, i, percentage"/>
<Returns> an orbit-by-suborbit object </Returns>
<Description>
    This is the main function in the whole business. All notations
    from the beginning of this Chapter <Ref Chap="bysuborbit"/> remain
    in place. The argument <A>setup</A>
    must be a setup record lying in the filter 
    <Ref Filt="IsOrbitBySuborbitSetup"/> described in detail in 
    Section <Ref Sect="obsodatastrucs"/> and produced for example by
    <Ref Func="OrbitBySuborbitBootstrapForVectors"/> or
    <Ref Func="OrbitBySuborbitBootstrapForLines"/> described below.
    In particular, it contains all the generators for <M>G</M> and the
    helper subgroups acting on the various sets. The argument <A>p</A>
    must be the starting point of the orbit. Note that the function
    possibly does not take <A>p</A> itself as starting point but rather
    its <M>U_k</M>-minimalisation, which is a point in the same 
    <M>U_k</M>-orbit as <A>p</A>. This information is important
    for the resulting stabiliser and words representing the 
    <M>U_k</M>-suborbits.
    <P/>
    The integers <A>j</A>, <A>l</A>, and <A>i</A>, for which
    <M>k+1 \ge <A>j</A> \ge <A>l</A> &gt; <A>i</A> \ge 1</M> must hold,
    determine the running mode. <A>j</A> indicates, in which set <M>X_j</M>
    the point <A>p</A> lies and thus in which set the orbit enumeration
    takes place, with <M>j=k+1</M> indicating the original set <M>X</M>. 
    The value <A>l</A> indicates which group to use for orbit enumeration.
    So the result will be a <M>U_l</M> orbit, with <M><A>l</A>=<A>k</A>+1</M>
    indicating a <M>G</M>-orbit. Finally, the value <A>i</A> indicates
    which group to use for the <Q>by suborbit</Q> part, that is, the orbit
    will be enumerated <Q>by <M>U_{<A>i</A>}</M>-orbits</Q>. Note that
    nearly all possible combinations of these parameters actually occur,
    because this function is also used in the <Q>on-the-fly</Q> 
    precomputation happening behind the scenes. The most common usage
    of this function for the user is <M><A>j</A>=<A>l</A>=<A>k</A>+1</M>
    and <M><A>i</A>=k</M>.
    <P/>
    Finally, the integer <A>percentage</A> says, how much of the full
    orbit should be enumerated, the value is in percent, thus <M>100</M>
    means the full orbit. Usually, only values greater than <M>50</M>
    are sensible, because one can only prove the size of the orbit
    after enumerating at least half of it.
</Description>
</ManSection>

<ManSection>
<Func Name="OrbitBySuborbitBootstrapForVectors" 
      Arg="gens, permgens, sizes, codims"/>
  <Returns> a setup record in the filter <Ref Filt="IsOrbitBySuborbitSetup"/>
  </Returns>
<Description>
All notations from the beginning of this Chapter <Ref Chap="bysuborbit"/> 
remain in place.
This function is for the action of matrices on row vectors, so all generators
must be matrices. The set <M>X</M> thus is a row space usually over a 
finite field and the sets <M>X_i</M> are quotient spaces. The matrix
generators for the various groups have to be adjusted with a base change,
such that the canonical projection onto <M>X_i</M> is just to take the
first few entries in a vector, which means, that the submodules divided
out are generated by the last standard basis vectors.
<P/>
The first argument <A>gens</A> must be a list of lists of generators. 
The outer list must have length <M>k+1</M> with entry <M>i</M> being a list 
of matrices generating <M>U_i</M>, given in the action on <M>X=X_{{k+1}}</M>.
The above mentioned base change must have been done. The second
argument <A>permgens</A> must be an analogous list with generator lists
for the <M>U_i</M>, but here we have to have permutation representations.
These permutation representations are used to compute membership and
group orders of stabilisers. The argument <A>sizes</A> must be a list of
length <M>k+1</M> and entry <M>i</M> must be the group order of <M>U_i</M>
(again with <M>U_{{k+1}}</M> being <M>G</M>). Finally, the argument
<A>codims</A> must be a list of length <M>k</M> containing integers
with the <M>i</M>th entry being the codimension of the <M>U_i</M>-invariant
subspace <M>Y_i</M> of <M>X</M> with <M>X_i = X/Y_i</M>. These
codimensions must not decrease for obvious reasons, but some of them
may be equal.
<P/>
The function does all necessary steps to fill a setup record
(see <Ref Sect="obsodatastrucs"/>) to be used with 
<Ref Func="OrbitBySuborbit"/>. For details see the code.
</Description>
</ManSection>
    
<ManSection>
<Func Name="OrbitBySuborbitBootstrapForLines" 
      Arg="gens, permgens, sizes, codims"/>
  <Returns> a setup record in the filter <Ref Filt="IsOrbitBySuborbitSetup"/>
  </Returns>
<Description>
All notations from the beginning of this Chapter <Ref Chap="bysuborbit"/> 
remain in place. This does exactly the same as 
<Ref Func="OrbitBySuborbitBootstrapForVectors"/> except that it handles
the case of matrices acting on one-dimensional subspaces. Those 
one-dimensional subspaces are represented by normalised vectors,
where a vector is normalised if its first non-vanishing entry is equal
to <M>1</M>.
</Description>
</ManSection>
</Section>

<Section Label="obsodatastrucs">
<Heading>Data structures for orbit-by-suborbits</Heading>

The description in this section is necessarily technical. It is meant
more as extended annotations to the source code than as user documentation.
Usually it should not be necessary for the user to know the details
presented here.

The function <Ref Func="OrbitBySuborbit"/> needs an information record
of the following form:

<ManSection>
<Filt Name="IsOrbitBySuborbitSetup" Arg="ob" Type="Category"/>
<Returns> <K>true</K> or <K>false</K> </Returns>
<Description>
Objects in this category are also in <C>IsComponentObjRep</C>. We describe
the components, refering to the setup at the beginning of this
Chapter <Ref Chap="bysuborbit"/>.
<List>
<Mark><C>k</C></Mark>
<Item> The number of helper subgroups.  </Item>
<Mark><C>size</C></Mark>
<Item> A list of length <M>k+1</M> containing the orders of the groups
    <M>U_i</M>, including <M>U_{{k+1}} = G</M>.
</Item>
<Mark><C>index</C></Mark>
<Item> A list of length <M>k</M> with the index <M>[U_i:U_{{i-1}}]</M>
    in position <M>i</M> (<M>U_0 = \{1\}</M>).
</Item>
<Mark><C></C></Mark>
<Item> 
</Item>
<Mark><C></C></Mark>
<Item> 
</Item>
</List>
</Description>
</ManSection>

</Section>

<Section>
<Heading>Lists of orbit-by-suborbit objects</Heading>

</Section>

<!-- ############################################################ -->

</Chapter>
